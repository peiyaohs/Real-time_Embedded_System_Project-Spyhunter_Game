


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             lib, CODE, READWRITE
    2 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    3 00000000                 EXPORT           UART_INIT
    4 00000000                 EXPORT           READ_CHARACTER
    5 00000000                 EXPORT           OUTPUT_CHARACTER
    6 00000000                 EXPORT           OUTPUT_STRING
    7 00000000                 EXPORT           READ_STRING
    8 00000000                 EXPORT           DIGITS_SET
    9 00000000                 EXPORT           DISPLAY_DIGIT
   10 00000000                 EXPORT           READ_PUSH_BTNS
   11 00000000                 EXPORT           LEDS
   12 00000000                 EXPORT           RGB_LED
   13 00000000                 EXPORT           unsigned_div_and_mod
   14 00000000         
   15 00000000 E000C014 
                       U0LSR   EQU              0xE000C014  ; UART0 Line Status
                                                             Register
   16 00000000 E000C000 
                       U0RBR   EQU              0xE000C000  ; UART0 recieve
   17 00000000 E000C000 
                       U0THR   EQU              0xE000C000  ; UART0 transmit
   18 00000000 E0028008 
                       IO0DIR  EQU              0xE0028008  ; PORT0 direction r
                                                            egister
   19 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018  ; PORT1 direction r
                                                            egister
   20 00000000 E0028004 
                       IO0SET  EQU              0xE0028004  ; PORT0 output set 
                                                            register
   21 00000000 E0028014 
                       IO1SET  EQU              0xE0028014  ; PORT1 output set 
                                                            register
   22 00000000 E002800C 
                       IO0CLR  EQU              0xE002800C  ; PORT0 output clea
                                                            r register
   23 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C  ; PORT1 output clea
                                                            r register
   24 00000000 E0028000 
                       IO0PIN  EQU              0xE0028000  ; PORT0 port pin va
                                                            lue register
   25 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010  ; PORT1 port pin va
                                                            lue register
   26 00000000         
   27 00000000         DIGITS_SET
   28 00000000 00001F80        DCD              0x00001F80  ;0
   29 00000004 00000300        DCD              0x00000300  ;1
   30 00000008 00002D80        DCD              0x00002D80  ;2
   31 0000000C 00002780        DCD              0x00002780  ;3
   32 00000010 00003300        DCD              0x00003300  ;4
   33 00000014 00003680        DCD              0x00003680  ;5
   34 00000018 00003E80        DCD              0x00003E80  ;6
   35 0000001C 00000380        DCD              0x00000380  ;7
   36 00000020 00003F80        DCD              0x00003F80  ;8
   37 00000024 00003780        DCD              0x00003780  ;9
   38 00000028 00003B80        DCD              0x00003B80  ;A



ARM Macro Assembler    Page 2 


   39 0000002C 00003E00        DCD              0x00003E00  ;b
   40 00000030 00001C80        DCD              0x00001C80  ;C
   41 00000034 00002F00        DCD              0x00002F00  ;d
   42 00000038 00003C80        DCD              0x00003C80  ;E
   43 0000003C 00003880        DCD              0x00003880  ;F
   44 00000040                 ALIGN
   45 00000040         
   46 00000040         ;-------------------------------------------------READ_P
                       USH_BTNS------------------------------------------------
                       ------------
   47 00000040         READ_PUSH_BTNS
   48 00000040 E92D4070        STMFD            SP!,{lr,r4-r6}
   49 00000044         ; output r0 is the pushed button values convert into int
                       eger from binary then display on to putty
   50 00000044         ; pin 20 is MSB, pin 23 LSB (maximum of 16 numbers, 0 to
                        15)
   51 00000044         ; the button pushed is 0; not pressed is 1
   52 00000044 E3A00000        MOV              r0, #0      ; reset r0
   53 00000048 E59F1320        LDR              r1, =IO1PIN ; address for data 
                                                            botton pushed
   54 0000004C E59F5320        LDR              r5, =IO1DIR ; set up IO1DIR
   55 00000050 E3A06000        MOV              r6, #0x00000000 ; we want all t
                                                            he pins (20 to 23) 
                                                            to be input (set to
                                                             0) 
   56 00000054 E5856000        STR              r6, [r5]    ; set the input
   57 00000058 E5910000        LDR              r0, [r1]    ; store information
                                                             into r0
   58 0000005C E1A00A20        LSR              r0, r0, #20 ; get to bit-20
   59 00000060 E200000F        AND              r0, #0xF    ; we just want the 
                                                            last 4 bit
   60 00000064         ; reverse the values
   61 00000064 E3A03000        MOV              r3, #0      ; reset r3
   62 00000068 E3A04000        MOV              r4, #0      ; initialize count
   63 0000006C         LOOP_BTN
   64 0000006C E2844001        ADD              r4, r4, #1  ; increment count
   65 00000070 E2002001        AND              r2, r0, #1  ; get the first bit
                                                            
   66 00000074 E3520001        CMP              r2, #1      ; check the first b
                                                            it is 1 or not
   67 00000078 0A000002        BEQ              LSL_0
   68 0000007C E1A03083        LSL              r3, #1      ; left shift 1
   69 00000080 E2833001        ADD              r3, r3, #1
   70 00000084 EA000000        B                END_LSL
   71 00000088         LSL_0                                ; left shift 0
   72 00000088 E1A03083        LSL              r3, #1
   73 0000008C         END_LSL
   74 0000008C E1A000A0        LSR              r0, r0, #1  ; increment (next b
                                                            it)
   75 00000090 E3540004        CMP              r4, #4      ; count (4 times)
   76 00000094 1AFFFFF4        BNE              LOOP_BTN
   77 00000098 E1A00003        MOV              r0, r3      ; output the value 
                                                            into r0
   78 0000009C         
   79 0000009C E8BD4070        LDMFD            sp!, {lr,r4-r6}
   80 000000A0 E12FFF1E        BX               lr
   81 000000A4         ;-------------------------------------------------LEDS--
                       --------------------------------------------------------
                       ------------



ARM Macro Assembler    Page 3 


   82 000000A4         LEDS
   83 000000A4 E92D4070        STMFD            SP!,{lr,r4-r6}
   84 000000A8         ; input r0 value use 4 LEDS to display the value in bina
                       ry
   85 000000A8         ; port 1 pin 16 to 19 (maximum of 16 numbers, 0 to 15)
   86 000000A8         ; pin 16 is MSB, pin 19 is LSB (reverse the order)
   87 000000A8         ; turn on is 0; turn off is 1
   88 000000A8 E59F52C8        LDR              r5, =IO1CLR ; set up IO1CLR
   89 000000AC E5956000        LDR              r6, [r5]
   90 000000B0 E386680F        ORR              r6, r6, #0xF0000 ; we want all 
                                                            the pins (16 to 19)
                                                             to be output (set 
                                                            to 1) 
   91 000000B4 E5856000        STR              r6, [r5]
   92 000000B8 E59F12BC        LDR              r1, =IO1SET
   93 000000BC E59F52B0        LDR              r5, =IO1DIR ; set up IO1DIR
   94 000000C0 E5956000        LDR              r6, [r5]
   95 000000C4 E386680F        ORR              r6, r6, #0xF0000 ; we want all 
                                                            the pins (16 to 19)
                                                             to be output (set 
                                                            to 1) 
   96 000000C8 E5856000        STR              r6, [r5]    ; set the output
   97 000000CC         ; reverse the order in r0
   98 000000CC E3A03000        MOV              r3, #0      ; reset r3
   99 000000D0 E3A04000        MOV              r4, #0      ; initialize count
  100 000000D4         LOOP_LED
  101 000000D4 E2844001        ADD              r4, r4, #1  ; increment count
  102 000000D8 E2002001        AND              r2, r0, #1  ; get the first bit
                                                            
  103 000000DC E3520001        CMP              r2, #1      ; check the first b
                                                            it is 1 or not
  104 000000E0 0A000002        BEQ              LSL_0_LED
  105 000000E4 E1A03083        LSL              r3, #1      ; left shift 1
  106 000000E8 E2833001        ADD              r3, r3, #1
  107 000000EC EA000000        B                END_LSL_LED
  108 000000F0         LSL_0_LED                            ; left shift 0
  109 000000F0 E1A03083        LSL              r3, #1
  110 000000F4         END_LSL_LED
  111 000000F4 E1A000A0        LSR              r0, r0, #1  ; increment (next b
                                                            it)
  112 000000F8 E3540004        CMP              r4, #4      ; count (4 times)
  113 000000FC 1AFFFFF4        BNE              LOOP_LED
  114 00000100 E1A03803        LSL              r3, #16     ; shift the values 
                                                            to bit-16
  115 00000104         
  116 00000104 E5813000        STR              r3, [r1]    ; store the informa
                                                            tion in address r1 
                                                            
  117 00000108         
  118 00000108 E8BD4070        LDMFD            sp!, {lr,r4-r6}
  119 0000010C E12FFF1E        BX               lr
  120 00000110         ;-------------------------------------------------RGB_LE
                       D-------------------------------------------------------
                       ------------
  121 00000110         RGB_LED
  122 00000110 E92D4070        STMFD            SP!,{lr, r4-r6}
  123 00000114         ; set the pin 17 18 21 in IO0SET to 1 to turn on the col
                       or
  124 00000114         ; set the pin 17 18 21 in IO0CLR to 1 to turn off the co



ARM Macro Assembler    Page 4 


                       lor
  125 00000114         ; 0 will not effect anything
  126 00000114         ; r0 is input color
  127 00000114         ; red: SET= 17, CLR= 18 and 21
  128 00000114         ; blue: SET= 18, CLR= 17 and 21
  129 00000114         ; green: SET= 21, CLR= 17 and 18 
  130 00000114         ; purple: SET= 17 and 18 (red and blue), CLR= 21
  131 00000114         ; yellow: SET= 17 and 21 (red and green), CLR= 18
  132 00000114         ; purple: SET= 17 and 18 (red and blue), CLR= 21
  133 00000114         ; white: SET= 17, 18 and 21, NO CLR
  134 00000114 E59F5264        LDR              r5, =IO0DIR ; set up IO1DIR
  135 00000118 E5956000        LDR              r6, [r5]
  136 0000011C E3866826        ORR              r6, r6, #0x260000 ; we want all
                                                             the pins (17 18 21
                                                            ) to be output (set
                                                             to 1) 
  137 00000120 E5856000        STR              r6, [r5]    ; set the output
  138 00000124 E59F1258        LDR              r1, =IO0SET ; address for turn 
                                                            off
  139 00000128 E59F2258        LDR              r2, =IO0CLR ; address for turn 
                                                            on
  140 0000012C E5926000        LDR              r6, [r2]
  141 00000130 E3866826        ORR              r6, r6, #0x260000
  142 00000134 E5826000        STR              r6, [r2]    ; turn on everythin
                                                            g
  143 00000138 E3500001        CMP              r0, #1      ; red
  144 0000013C 0A00000A        BEQ              RED
  145 00000140 E3500002        CMP              r0, #2      ; blue
  146 00000144 0A00000C        BEQ              BLUE
  147 00000148 E3500003        CMP              r0, #3      ; green
  148 0000014C 0A00000E        BEQ              GREEN
  149 00000150 E3500004        CMP              r0, #4      ; purple
  150 00000154 0A00000F        BEQ              PURPLE
  151 00000158 E3500005        CMP              r0, #5      ; yellow
  152 0000015C 0A000011        BEQ              YELLOW
  153 00000160 E3500006        CMP              r0, #6      ; white
  154 00000164 0A000012        BEQ              WHITE
  155 00000168 EA000015        B                ELSE_CLOSE
  156 0000016C         RED
  157 0000016C E5914000        LDR              r4, [r1]
  158 00000170 E3844709        ORR              r4, r4, #0x240000 ; close blue 
                                                            and green, keep red
                                                             (pin 17)
  159 00000174 E5814000        STR              r4, [r1]    ; display red
  160 00000178 EA000014        B                END_LED
  161 0000017C         BLUE
  162 0000017C E5914000        LDR              r4, [r1]
  163 00000180 E3844822        ORR              r4, r4, #0x220000 ; close red a
                                                            nd green, keep blue
                                                             (pin 18)
  164 00000184 E5814000        STR              r4, [r1]    ; display blue
  165 00000188 EA000010        B                END_LED
  166 0000018C         GREEN
  167 0000018C E3A04806        MOV              r4, #0x60000 ; close red and bl
                                                            ue, keep green (pin
                                                             21)
  168 00000190 E5814000        STR              r4, [r1]    ; display green
  169 00000194 EA00000D        B                END_LED
  170 00000198         PURPLE



ARM Macro Assembler    Page 5 


  171 00000198 E5914000        LDR              r4, [r1]
  172 0000019C E3844602        ORR              r4, r4, #0x200000 ; close green
                                                            , keep red and blue
                                                             (pin 17 and 18)
  173 000001A0 E5814000        STR              r4, [r1]    ; display purple
  174 000001A4 EA000009        B                END_LED
  175 000001A8         YELLOW
  176 000001A8 E3A04701        MOV              r4, #0x40000 ; close blue, keep
                                                             red and green (pin
                                                             17 and 21)
  177 000001AC E5814000        STR              r4, [r1]    ; display yellow
  178 000001B0 EA000006        B                END_LED
  179 000001B4         WHITE
  180 000001B4 E5914000        LDR              r4, [r1]
  181 000001B8 E3844000        ORR              r4, r4, #0x000000 ; keep all co
                                                            lors (pin 17, 18 an
                                                            d 21)
  182 000001BC E5814000        STR              r4, [r1]    ; display white
  183 000001C0         ; no need to close
  184 000001C0 EA000002        B                END_LED
  185 000001C4         ELSE_CLOSE
  186 000001C4 E5914000        LDR              r4, [r1]
  187 000001C8 E3844826        ORR              r4, r4, #0x260000 ; close all c
                                                            olors (pin 17, 18 a
                                                            nd 21)
  188 000001CC E5814000        STR              r4, [r1]    ; display no color
  189 000001D0         END_LED
  190 000001D0         
  191 000001D0 E8BD4070        LDMFD            sp!, {lr, r4-r6}
  192 000001D4 E12FFF1E        BX               lr
  193 000001D8         ;-------------------------------------------------DISPLA
                       Y_DIGIT-------------------------------------------------
                       ------------
  194 000001D8         DISPLAY_DIGIT
  195 000001D8 E92D407C        STMFD            SP!,{lr,r2-r6}
  196 000001DC         ; read input value from r0 (number value), port 0 pin 7 
                       to 13
  197 000001DC         ; display it on board
  198 000001DC         ; store nothing after finish displaying
  199 000001DC E59F21A4        LDR              r2, =IO0CLR ; clear the port
  200 000001E0 E5926000        LDR              r6, [r2]
  201 000001E4 E3866DFE        ORR              r6, r6, #0x00003F80 ; we want t
                                                            o clear all the pin
                                                            s (7 to 13, set to 
                                                            1) 
  202 000001E8 E5826000        STR              r6, [r2]
  203 000001EC E59F1190        LDR              r1, =IO0SET ; address for displ
                                                            ay
  204 000001F0 E59F4194        LDR              r4, =DIGITS_SET ; start address
                                                             of digit sets
  205 000001F4 E59F5184        LDR              r5, =IO0DIR ; set up IO0DIR
  206 000001F8 E5956000        LDR              r6, [r5]
  207 000001FC E3866DFE        ORR              r6, r6, #0x00003F80 ; we want a
                                                            ll the pins (7 to 1
                                                            3) to be output (se
                                                            t to 1) 
  208 00000200 E5856000        STR              r6, [r5]    ; set the output
  209 00000204         ; treat r0 as offset to get the correct display digit
  210 00000204 E3A05004        MOV              r5, #4



ARM Macro Assembler    Page 6 


  211 00000208 E0000095        MUL              r0, r5, r0
  212 0000020C E7944000        LDR              r4, [r4, r0] ; Load IOSET patte
                                                            rn for digit in r0
  213 00000210 E5814000        STR              r4, [r1]    ; Display (IOSET)
  214 00000214         
  215 00000214 E8BD407C        LDMFD            sp!, {lr,r2-r6}
  216 00000218 E12FFF1E        BX               lr
  217 0000021C         ;-------------------------------------------------UART_I
                       NIT-----------------------------------------------------
                       ------------
  218 0000021C         UART_INIT
  219 0000021C E92D4000        STMFD            SP!,{lr}
  220 00000220 E3A03083        MOV              r3,#131
  221 00000224 E59F2164        LDR              r2, =0xE000C00C
  222 00000228 E5C23000        STRB             r3,[r2]
  223 0000022C         
  224 0000022C E3A03001        MOV              r3,#1       ; 120... 1 if we us
                                                            ed 1152000 in putty
                                                             (lag out?)
  225 00000230 E59F415C        LDR              r4, =0xE000C000
  226 00000234 E5C43000        STRB             r3,[r4]
  227 00000238         
  228 00000238 E3A03000        MOV              r3,#0       ; 0
  229 0000023C E59F5154        LDR              r5, =0xE000C004
  230 00000240 E5C53000        STRB             r3,[r5]
  231 00000244         
  232 00000244 E3A03003        MOV              r3,#3
  233 00000248 E59F6140        LDR              r6,=0xE000C00C
  234 0000024C E5C63000        STRB             r3,[r6]
  235 00000250         
  236 00000250 E8BD4000        LDMFD            sp!, {lr}
  237 00000254 E12FFF1E        BX               lr
  238 00000258         
  239 00000258         ;-------------------------------------------------READ C
                       HARACTER------------------------------------------------
                       ------------
  240 00000258         READ_CHARACTER
  241 00000258 E92D4000        STMFD            SP!,{lr}
  242 0000025C E59F1130        LDR              r1, =U0RBR  ; load address into
                                                             r1
  243 00000260 E59F3134        LDR              r3, =U0LSR  ; load address into
                                                             r3
  244 00000264         READ
  245 00000264 E5D32000        LDRB             r2, [r3]    ; load content into
                                                             r2
  246 00000268 E2022001        AND              r2, r2, #1  ; get RDR by AND wi
                                                            th 0000 0001
  247 0000026C E3520000        CMP              r2, #0      ; test RDR in statu
                                                            s register
  248 00000270 0AFFFFFB        BEQ              READ        ; if 0 then back to
                                                             READ
  249 00000274 E5D10000        LDRB             r0, [r1]    ; read byte
  250 00000278         
  251 00000278 E8BD4000        LDMFD            sp!, {lr}
  252 0000027C E12FFF1E        BX               lr
  253 00000280         
  254 00000280         ;-------------------------------------------------OUTPUT
                        CHARACTER----------------------------------------------
                       ------------



ARM Macro Assembler    Page 7 


  255 00000280         OUTPUT_CHARACTER
  256 00000280 E92D4000        STMFD            SP!,{lr}
  257 00000284 E59F1108        LDR              r1, =U0THR  ; load address into
                                                             r1
  258 00000288 E59F310C        LDR              r3, =U0LSR  ; load address into
                                                             r3
  259 0000028C         TRANS
  260 0000028C E5D32000        LDRB             r2, [r3]    ; load content into
                                                             r2
  261 00000290 E2022020        AND              r2, r2, #0x20 ; get THRE by AND
                                                             with 0010 0000
  262 00000294 E3520000        CMP              r2, #0      ; test THRE in stat
                                                            us register
  263 00000298 0AFFFFFB        BEQ              TRANS       ; if 0 then back to
                                                             TRANS
  264 0000029C E3500000        CMP              r0, #0      ; check if the cont
                                                            ent in NULL
  265 000002A0 0A000000        BEQ              JUMP        ; if yes then jump 
                                                            out of store byte
  266 000002A4 E5C10000        STRB             r0, [r1]    ; store byte
  267 000002A8         JUMP
  268 000002A8         
  269 000002A8 E8BD4000        LDMFD            sp!, {lr}
  270 000002AC E12FFF1E        BX               lr
  271 000002B0         
  272 000002B0         ;-------------------------------------------------OUTPUT
                        STRING-------------------------------------------------
                       ------------
  273 000002B0         OUTPUT_STRING
  274 000002B0 E92D4010        STMFD            SP!,{lr,r4}
  275 000002B4         ; r4 stores the address of the contant
  276 000002B4 E1A01000        MOV              r1, r0
  277 000002B8         PROCESS_OUTPUT
  278 000002B8 E4D40001        LDRB             r0, [r4], #1 ; load the first c
                                                            haracter then add 1
                                                             to the address
  279 000002BC E3500000        CMP              r0, #0      ; string terminate 
                                                            by null --> ASCII 0
                                                            
  280 000002C0 0A000001        BEQ              EXIT_OUTPUT
  281 000002C4 EBFFFFFE        BL               OUTPUT_CHARACTER
  282 000002C8 EAFFFFFA        B                PROCESS_OUTPUT
  283 000002CC         EXIT_OUTPUT
  284 000002CC         
  285 000002CC E8BD4010        LDMFD            sp!, {lr,r4}
  286 000002D0 E12FFF1E        BX               lr
  287 000002D4         
  288 000002D4         ;-------------------------------------------------READ S
                       TRING---------------------------------------------------
                       ------------
  289 000002D4         READ_STRING
  290 000002D4         ; integers value of input
  291 000002D4         ; store value to r4
  292 000002D4 E92D4010        STMFD            SP!,{lr,r4}
  293 000002D8         PROCESS_READ
  294 000002D8 EBFFFFFE        BL               READ_CHARACTER
  295 000002DC E350000D        CMP              r0, #13
  296 000002E0 0A000002        BEQ              EXIT_READ
  297 000002E4 EBFFFFFE        BL               OUTPUT_CHARACTER



ARM Macro Assembler    Page 8 


  298 000002E8 E4C40001        STRB             r0, [r4], #1
  299 000002EC EAFFFFF9        B                PROCESS_READ
  300 000002F0         EXIT_READ
  301 000002F0 E3A00000        MOV              r0, #0
  302 000002F4 E4C40001        STRB             r0, [r4], #1
  303 000002F8         
  304 000002F8 E8BD4010        LDMFD            sp!, {lr,r4}
  305 000002FC E12FFF1E        BX               lr
  306 00000300         
  307 00000300         ;-------------------------------------------------unsign
                       ed_div_and_mod------------------------------------------
                       ---------------------
  308 00000300         ; r0 dividend
  309 00000300         ; r1 divisor
  310 00000300         ; r2 quotient
  311 00000300         ; r3 remainder
  312 00000300         unsigned_div_and_mod
  313 00000300 E92D5FF0        STMFD            sp!, {lr, r4-r12}
  314 00000304         ; Your code for the signed division/mod routine goes her
                       e.
  315 00000304         ; The dividend is passed in r0 and the divisor in r1.
  316 00000304         ; The quotient is returned in r0 and the remainder in r1
                       .
  317 00000304 E3A0400F        MOV              r4, #15     ; initialize counte
                                                            r to 15
  318 00000308 E3A02000        MOV              r2, #0      ; initialize quotie
                                                            nt to 0
  319 0000030C E1A03000        MOV              r3, r0      ; initialize remain
                                                            der to dividend
  320 00000310 E1A01781        MOV              r1, r1, LSL #15 ; left shift di
                                                            visior by 15 bits
  321 00000314         
  322 00000314         LOOP
  323 00000314 E0433001        SUB              r3, r3, r1  ; start of the loop
                                                            
  324 00000318         ; remainder less than 0 or not
  325 00000318         TEST
  326 00000318 E3530000        CMP              r3, #0
  327 0000031C BA000000        BLT              THEN        ; if remainder less
                                                             than 0 go to THEN
  328 00000320 EA000002        B                GREATER     ; if not go to DONE
                                                            
  329 00000324         THEN
  330 00000324 E0833001        ADD              r3, r3, r1  ; remainder + divis
                                                            or
  331 00000328 E1A02082        MOV              r2, r2, LSL #1 ; left shift quo
                                                            tient by 0
  332 0000032C EA000001        B                DONE        ; finish then state
                                                            ment move to DONE
  333 00000330         GREATER
  334 00000330         ; left shift quotient by 1
  335 00000330 E1A02082        MOV              r2, r2, LSL #1 ; left shift quo
                                                            tient by 0
  336 00000334 E2822001        ADD              r2, r2, #1  ; add one
  337 00000338         DONE
  338 00000338 E1A010A1        MOV              r1, r1, LSR #1 ; right shift di
                                                            visor by 1 bit
  339 0000033C E3540000        CMP              r4, #0      ; compare counter i
                                                            s greater than 0



ARM Macro Assembler    Page 9 


  340 00000340 E2444001        SUB              r4, r4, #1  ; decrement counter
                                                            
  341 00000344 CAFFFFF2        BGT              LOOP        ; back to loop
  342 00000348         
  343 00000348 E8BD5FF0        LDMFD            sp!, {lr, r4-r12}
  344 0000034C E12FFF1E        BX               lr
  345 00000350         
  346 00000350         ;-------------------------------------------------PIN CO
                       NNECT---------------------------------------------------
                       ------------
  347 00000350         pin_connect_block_setup_for_uart0
  348 00000350 E92D4003        STMFD            SP!, {r0, r1, lr}
  349 00000354 E59F0044        LDR              r0, =0xE002C000 ; PINSEL0
  350 00000358 E5901000        LDR              r1, [r0]
  351 0000035C E3811005        ORR              r1, r1, #5
  352 00000360 E3C1100A        BIC              r1, r1, #0xA
  353 00000364 E5801000        STR              r1, [r0]
  354 00000368 E8BD4003        LDMFD            sp!, {r0, r1, lr}
  355 0000036C E12FFF1E        BX               lr
  356 00000370         
  357 00000370                 END
              E0028010 
              E0028018 
              E002801C 
              E0028014 
              E0028008 
              E0028004 
              E002800C 
              00000000 
              E000C00C 
              E000C000 
              E000C004 
              E000C014 
              E002C000 
Command Line: --debug --xref --apcs=interwork -olibrary.o -IC:\Keil\ARM\INC -IC
:\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" --list=library.lst library.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BLUE 0000017C

Symbol: BLUE
   Definitions
      At line 161 in file library.s
   Uses
      At line 146 in file library.s
Comment: BLUE used once
DIGITS_SET 00000000

Symbol: DIGITS_SET
   Definitions
      At line 27 in file library.s
   Uses
      At line 8 in file library.s
      At line 204 in file library.s

DISPLAY_DIGIT 000001D8

Symbol: DISPLAY_DIGIT
   Definitions
      At line 194 in file library.s
   Uses
      At line 9 in file library.s
Comment: DISPLAY_DIGIT used once
DONE 00000338

Symbol: DONE
   Definitions
      At line 337 in file library.s
   Uses
      At line 332 in file library.s
Comment: DONE used once
ELSE_CLOSE 000001C4

Symbol: ELSE_CLOSE
   Definitions
      At line 185 in file library.s
   Uses
      At line 155 in file library.s
Comment: ELSE_CLOSE used once
END_LED 000001D0

Symbol: END_LED
   Definitions
      At line 189 in file library.s
   Uses
      At line 160 in file library.s
      At line 165 in file library.s
      At line 169 in file library.s
      At line 174 in file library.s
      At line 178 in file library.s
      At line 184 in file library.s

END_LSL 0000008C

Symbol: END_LSL
   Definitions
      At line 73 in file library.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 70 in file library.s
Comment: END_LSL used once
END_LSL_LED 000000F4

Symbol: END_LSL_LED
   Definitions
      At line 110 in file library.s
   Uses
      At line 107 in file library.s
Comment: END_LSL_LED used once
EXIT_OUTPUT 000002CC

Symbol: EXIT_OUTPUT
   Definitions
      At line 283 in file library.s
   Uses
      At line 280 in file library.s
Comment: EXIT_OUTPUT used once
EXIT_READ 000002F0

Symbol: EXIT_READ
   Definitions
      At line 300 in file library.s
   Uses
      At line 296 in file library.s
Comment: EXIT_READ used once
GREATER 00000330

Symbol: GREATER
   Definitions
      At line 333 in file library.s
   Uses
      At line 328 in file library.s
Comment: GREATER used once
GREEN 0000018C

Symbol: GREEN
   Definitions
      At line 166 in file library.s
   Uses
      At line 148 in file library.s
Comment: GREEN used once
JUMP 000002A8

Symbol: JUMP
   Definitions
      At line 267 in file library.s
   Uses
      At line 265 in file library.s
Comment: JUMP used once
LEDS 000000A4

Symbol: LEDS
   Definitions
      At line 82 in file library.s
   Uses
      At line 11 in file library.s
Comment: LEDS used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

LOOP 00000314

Symbol: LOOP
   Definitions
      At line 322 in file library.s
   Uses
      At line 341 in file library.s
Comment: LOOP used once
LOOP_BTN 0000006C

Symbol: LOOP_BTN
   Definitions
      At line 63 in file library.s
   Uses
      At line 76 in file library.s
Comment: LOOP_BTN used once
LOOP_LED 000000D4

Symbol: LOOP_LED
   Definitions
      At line 100 in file library.s
   Uses
      At line 113 in file library.s
Comment: LOOP_LED used once
LSL_0 00000088

Symbol: LSL_0
   Definitions
      At line 71 in file library.s
   Uses
      At line 67 in file library.s
Comment: LSL_0 used once
LSL_0_LED 000000F0

Symbol: LSL_0_LED
   Definitions
      At line 108 in file library.s
   Uses
      At line 104 in file library.s
Comment: LSL_0_LED used once
OUTPUT_CHARACTER 00000280

Symbol: OUTPUT_CHARACTER
   Definitions
      At line 255 in file library.s
   Uses
      At line 5 in file library.s
      At line 281 in file library.s
      At line 297 in file library.s

OUTPUT_STRING 000002B0

Symbol: OUTPUT_STRING
   Definitions
      At line 273 in file library.s
   Uses
      At line 6 in file library.s
Comment: OUTPUT_STRING used once
PROCESS_OUTPUT 000002B8



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: PROCESS_OUTPUT
   Definitions
      At line 277 in file library.s
   Uses
      At line 282 in file library.s
Comment: PROCESS_OUTPUT used once
PROCESS_READ 000002D8

Symbol: PROCESS_READ
   Definitions
      At line 293 in file library.s
   Uses
      At line 299 in file library.s
Comment: PROCESS_READ used once
PURPLE 00000198

Symbol: PURPLE
   Definitions
      At line 170 in file library.s
   Uses
      At line 150 in file library.s
Comment: PURPLE used once
READ 00000264

Symbol: READ
   Definitions
      At line 244 in file library.s
   Uses
      At line 248 in file library.s
Comment: READ used once
READ_CHARACTER 00000258

Symbol: READ_CHARACTER
   Definitions
      At line 240 in file library.s
   Uses
      At line 4 in file library.s
      At line 294 in file library.s

READ_PUSH_BTNS 00000040

Symbol: READ_PUSH_BTNS
   Definitions
      At line 47 in file library.s
   Uses
      At line 10 in file library.s
Comment: READ_PUSH_BTNS used once
READ_STRING 000002D4

Symbol: READ_STRING
   Definitions
      At line 289 in file library.s
   Uses
      At line 7 in file library.s
Comment: READ_STRING used once
RED 0000016C

Symbol: RED



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 156 in file library.s
   Uses
      At line 144 in file library.s
Comment: RED used once
RGB_LED 00000110

Symbol: RGB_LED
   Definitions
      At line 121 in file library.s
   Uses
      At line 12 in file library.s
Comment: RGB_LED used once
TEST 00000318

Symbol: TEST
   Definitions
      At line 325 in file library.s
   Uses
      None
Comment: TEST unused
THEN 00000324

Symbol: THEN
   Definitions
      At line 329 in file library.s
   Uses
      At line 327 in file library.s
Comment: THEN used once
TRANS 0000028C

Symbol: TRANS
   Definitions
      At line 259 in file library.s
   Uses
      At line 263 in file library.s
Comment: TRANS used once
UART_INIT 0000021C

Symbol: UART_INIT
   Definitions
      At line 218 in file library.s
   Uses
      At line 3 in file library.s
Comment: UART_INIT used once
WHITE 000001B4

Symbol: WHITE
   Definitions
      At line 179 in file library.s
   Uses
      At line 154 in file library.s
Comment: WHITE used once
YELLOW 000001A8

Symbol: YELLOW
   Definitions
      At line 175 in file library.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 152 in file library.s
Comment: YELLOW used once
lib 00000000

Symbol: lib
   Definitions
      At line 1 in file library.s
   Uses
      None
Comment: lib unused
pin_connect_block_setup_for_uart0 00000350

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 347 in file library.s
   Uses
      At line 2 in file library.s
Comment: pin_connect_block_setup_for_uart0 used once
unsigned_div_and_mod 00000300

Symbol: unsigned_div_and_mod
   Definitions
      At line 312 in file library.s
   Uses
      At line 13 in file library.s
Comment: unsigned_div_and_mod used once
39 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 22 in file library.s
   Uses
      At line 139 in file library.s
      At line 199 in file library.s

IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 18 in file library.s
   Uses
      At line 134 in file library.s
      At line 205 in file library.s

IO0PIN E0028000

Symbol: IO0PIN
   Definitions
      At line 24 in file library.s
   Uses
      None
Comment: IO0PIN unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 20 in file library.s
   Uses
      At line 138 in file library.s
      At line 203 in file library.s

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 23 in file library.s
   Uses
      At line 88 in file library.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 19 in file library.s
   Uses
      At line 54 in file library.s
      At line 93 in file library.s

IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 25 in file library.s
   Uses
      At line 53 in file library.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 21 in file library.s
   Uses
      At line 92 in file library.s
Comment: IO1SET used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 15 in file library.s
   Uses
      At line 243 in file library.s
      At line 258 in file library.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 16 in file library.s
   Uses
      At line 242 in file library.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 17 in file library.s
   Uses
      At line 257 in file library.s
Comment: U0THR used once
11 symbols
372 symbols in table
